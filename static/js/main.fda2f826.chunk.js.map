{"version":3,"sources":["data/weekDays.ts","data/utils.ts","components/Dropdown/Dropdown.tsx","components/SalaryCalculator/SalaryCalculator.tsx","App.tsx","data/employeeList.ts","reportWebVitals.ts","index.tsx"],"names":["days","day","weekend","getWeekList","now","moment","monday","clone","weekday","sunday","format","generateEmployee","name","weekList","map","item","period","timeSheet","hours","Math","floor","random","id","uuidv4","Dropdown","value","option","label","onChange","useState","open","setOpen","button","useRef","className","onMouseLeave","src","alt","ref","onClick","current","focus","workedHoursAndSalary","salary","SalaryCalculator","updateEmployeeHours","totalHoursAndSalary","setTotalHoursAndSalary","loading","setLoading","useEffect","newTotal","forEach","timeOut","setTimeout","clearTimeout","type","min","max","onKeyPress","e","test","key","preventDefault","Number","target","dayTitle","clickHandler","htmlFor","toFixed","employeeNames","list","names","length","randomNames","push","Set","getRandomEmployees","App","selectedWeek","setSelectedWeek","currentTimeSheet","setCurrentTimeSheet","local","JSON","parse","localStorage","getItem","newEmployee","find","setItem","stringify","personData","setPersonData","getEmployeeHours","week","it","findedEmployee","updateEmployee","updatedWeek","updatedTimeSheet","newPersonData","newEmployees","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fda2f826.chunk.js","sourcesContent":["export const days = [\n  {\n    day: 'Monday',\n    weekend: false,\n  },\n  {\n    day: 'Tuesday',\n    weekend: false,\n  },\n  {\n    day: 'Wednesday',\n    weekend: false,\n  },\n  {\n    day: 'Thursday',\n    weekend: false,\n  },\n  {\n    day: 'Friday',\n    weekend: false,\n  },\n\n  {\n    day: 'Saturday',\n    weekend: true,\n  },\n  {\n    day: 'Sunday',\n    weekend: true,\n  },\n];\n\nexport default days;\n","/* eslint-disable max-len */\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\nimport { days } from './weekDays';\nimport { Employee, Week } from '../App';\n\nexport const getRandomEmployees = (list: string[]): string[] => {\n  let names: string[] = [];\n\n  while (names.length < 5) {\n    const randomNames = list[Math.floor(Math.random() * list.length)];\n    names.push(randomNames);\n    const checkDublicate = [...new Set(names)];\n    names = checkDublicate;\n  }\n\n  return names;\n};\n\nexport const getWeekList = (): string[] => {\n  const now = moment();\n  const monday = now.clone().weekday(1);\n  const sunday = now.clone().weekday(7);\n  const weekList: string[] = [\n    `${monday.format('DD MMM YYYY')} - ${sunday.format('DD MMM YYYY')}`,\n    `${moment(monday).clone().weekday(-6).format('DD MMM YYYY')} - ${moment(monday).clone().weekday(0).format('DD MMM YYYY')}`,\n    `${moment(monday).clone().weekday(-13).format('DD MMM YYYY')} - ${moment(monday).clone().weekday(-7).format('DD MMM YYYY')}`,\n    `${moment(monday).clone().weekday(-20).format('DD MMM YYYY')} - ${moment(monday).clone().weekday(-14).format('DD MMM YYYY')}`,\n    `${moment(monday).clone().weekday(-27).format('DD MMM YYYY')} - ${moment(monday).clone().weekday(-21).format('DD MMM YYYY')}`,\n  ];\n  return weekList;\n};\n\nexport const generateWorkedHours = () => days.map((day) => ({ ...day, hours: Math.floor(Math.random() * (8 - 0 + 1) + 0) }));\n\nexport const setWorkedHours = ():Week[] => getWeekList().map((item) => ({\n  period: item,\n  timeSheet: generateWorkedHours(),\n}));\n\nexport const generateEmployee = (name: string, weekList: string[]): Employee => ({ name, weekList: setWorkedHours(), id: uuidv4() });\n","/* eslint-disable no-restricted-globals */\n\nimport React, { useState, useRef } from 'react';\nimport './Dropdown.scss';\n\ntype Props = {\n  value: string;\n  option: string[];\n  label: string;\n  onChange: (value: string) => void;\n};\n\nconst Dropdown: React.FC<Props> = ({\n  value, option, label, onChange,\n}) => {\n  const [open, setOpen] = useState(false);\n  const button = useRef<HTMLButtonElement>(null);\n\n  return (\n    <div className=\"dropdown\" onMouseLeave={() => setOpen(false)}>\n      <div className=\"button__wrapper\">\n        <img className=\"dropdown__user\" src=\"employee.png\" alt=\"userimage\" />\n        <button\n          className=\"dropdown__button\"\n          ref={button}\n          onClick={() => setOpen(!open)}\n        >\n          {value}\n        </button>\n        <span className=\"dropdown__label\">{label}</span>\n      </div>\n\n      <div className={open ? 'dropdown__list active' : 'dropdown__list'}>\n        {option.map((item) => (\n          <div\n            className=\"dropdown__list--item\"\n            key={Math.random()}\n            onClick={() => {\n              onChange(item);\n              setOpen(!open);\n              button.current?.focus();\n            }}\n          >\n            {item}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React, { useEffect, useState } from 'react';\nimport { TimeSheet } from '../../App';\nimport './SalaryCalculator.scss';\n\ntype Props = {\n  timeSheet: TimeSheet[];\n  updateEmployeeHours: (hours: number, dayTitle: string) => void;\n};\n\nconst workedHoursAndSalary = { hours: 0, salary: 0 };\n\nconst SalaryCalculator: React.FC<Props> = ({\n  timeSheet,\n  updateEmployeeHours,\n}) => {\n  const [totalHoursAndSalary, setTotalHoursAndSalary] = useState(workedHoursAndSalary);\n  const [loading, setLoading] = useState(false);\n\n  const clickHandler = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    dayTitle: string,\n  ) => {\n    const value = Number(e.target.value);\n    updateEmployeeHours(value, dayTitle);\n  };\n\n  useEffect(() => {\n    const newTotal = { hours: 0, salary: 0 };\n\n    timeSheet.forEach((item) => {\n      newTotal.hours += item.hours;\n      newTotal.salary += item.hours * (item.weekend ? 20 : 10);\n    });\n\n    setTotalHoursAndSalary(newTotal);\n\n    const timeOut = setTimeout(() => {\n      setLoading(false);\n    }, 500);\n\n    return () => {\n      setLoading(true);\n      clearTimeout(timeOut);\n    };\n  }, [timeSheet]);\n\n  return (\n    <div className=\"content\">\n      <div>\n        {timeSheet.map((item) => (\n          <div className=\"inputs__list\" key={item.day}>\n            <div className=\"input__wrapper\">\n              <input\n                className=\"input\"\n                type=\"number\"\n                min=\"0\"\n                max=\"24\"\n                onKeyPress={(e) => {\n                  if (!/[0-9]/.test(e.key)) {\n                    e.preventDefault();\n                  }\n                }}\n                onChange={(e) => {\n                  if (Number(e.target.value) <= 24) {\n                    clickHandler(e, item.day);\n                  }\n                }}\n                value={item.hours}\n                id={item.day}\n              />\n              <label className=\"input__label\" htmlFor={item.day}>\n                {item.day}\n              </label>\n            </div>\n\n            <span className=\"input__salary\">\n              {!loading\n                ? `€${(item.hours * (item.weekend ? 20 : 10)).toFixed(2)}`\n                : 0}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"total\">\n        <div className=\"total__hours\">\n          <span>Hours worked</span>\n          <span>{totalHoursAndSalary.hours}</span>\n        </div>\n        <div className=\"total__salary\">\n          <span>Salary</span>\n          <span>\n            {!loading ? `€${totalHoursAndSalary.salary.toFixed(2)}` : 0}\n          </span>\n        </div>\n      </div>\n\n      {loading ? (\n        <img className=\"loading__image\" src=\"loading.gif\" alt=\"loading\" />\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n\nexport default SalaryCalculator;\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport { getWeekList, generateEmployee, getRandomEmployees } from './data/utils';\nimport Dropdown from './components/Dropdown/Dropdown';\nimport SalaryCalculator from './components/SalaryCalculator/SalaryCalculator';\nimport employeeList from './data/employeeList';\n\nconst employeeNames = getRandomEmployees(employeeList);\nconst weekList = getWeekList();\n\nexport type TimeSheet = {\n  day: string;\n  hours: number;\n  weekend: boolean;\n};\n\nexport type Week = {\n  period: string;\n  timeSheet: TimeSheet[];\n};\n\nexport type Employee = {\n  name: string;\n  id: string;\n  weekList: Week[];\n};\n\nconst App = () => {\n  const [selectedWeek, setSelectedWeek] = useState(weekList[0]);\n  const [currentTimeSheet, setCurrentTimeSheet] = useState<TimeSheet[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [personData, setPersonData] = useState(() => {\n    const local: Employee[] = JSON.parse(\n      localStorage.getItem('employees') || '[]',\n    );\n    const newEmployee = generateEmployee(employeeNames[0], weekList);\n    if (!local.find((item) => item.name === employeeNames[0])) {\n      localStorage.setItem(\n        'employees',\n        JSON.stringify([...local, newEmployee]),\n      );\n    }\n\n    return newEmployee;\n  });\n\n  const getEmployeeHours = () => {\n    const week = personData.weekList.find((it) => it.period === selectedWeek);\n    return week?.timeSheet || ([] as TimeSheet[]);\n  };\n\n  const updateEmployeeHours = (hours: number, dayTitle: string) => {\n    const local: Employee[] = JSON.parse(\n      localStorage.getItem('employees') || '[]',\n    );\n\n    const updatedWeek = personData.weekList.find((week) => week.period === selectedWeek)\n      || ({} as Week);\n\n    const updatedTimeSheet = updatedWeek?.timeSheet.map((day) => {\n      if (day.day === dayTitle) {\n        return { ...day, hours };\n      }\n      return day;\n    });\n    if (updatedTimeSheet) {\n      setCurrentTimeSheet(updatedTimeSheet);\n    }\n\n    const newPersonData = {\n      ...personData,\n      weekList: personData.weekList.map((week) => {\n        if (week.period === selectedWeek) {\n          return { ...week, timeSheet: updatedTimeSheet };\n        }\n        return week;\n      }),\n    };\n\n    setPersonData(newPersonData);\n    const newEmployees = local.filter((it) => it.name !== personData.name);\n    localStorage.setItem(\n      'employees',\n      JSON.stringify([...newEmployees, newPersonData]),\n    );\n  };\n\n  const updateEmployee = (name: string) => {\n    const local: Employee[] = JSON.parse(\n      localStorage.getItem('employees') || '[]',\n    );\n\n    const newEmployee = generateEmployee(name, weekList);\n    const findedEmployee = local.find((item) => item.name === name);\n    if (findedEmployee) {\n      setPersonData(findedEmployee);\n    } else {\n      localStorage.setItem(\n        'employees',\n        JSON.stringify([...local, newEmployee]),\n      );\n      setPersonData(newEmployee);\n    }\n  };\n\n  useEffect(() => {\n    setCurrentTimeSheet(getEmployeeHours());\n  }, [selectedWeek, loading]);\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setLoading(false);\n    }, 50);\n\n    return () => {\n      setLoading(true);\n      clearTimeout(timeOut);\n    };\n  }, [personData, currentTimeSheet]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"dropdown__wrapper\">\n        <Dropdown\n          option={employeeNames}\n          value={personData.name}\n          onChange={(value) => updateEmployee(value)}\n          label=\"Employee\"\n        />\n        <Dropdown\n          option={weekList}\n          value={selectedWeek}\n          onChange={(value) => {\n            setSelectedWeek(value);\n            setCurrentTimeSheet(getEmployeeHours());\n          }}\n          label=\"Week\"\n        />\n      </div>\n\n      <SalaryCalculator\n        timeSheet={currentTimeSheet}\n        updateEmployeeHours={(hours: number, dayTitle: string) => updateEmployeeHours(hours, dayTitle)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export const employeeList: string[] = [\n  'Willow Hackett',\n  'Spike Fuentes',\n  'Rizwan England',\n  ' Tyler - Jay Wall',\n  '  Jayden Head',\n  ' Dewey Fuller',\n  '  Nazim Reid',\n  '  Nicky North',\n  '  Gruffydd Singh',\n  ' Rickie Arellano',\n  ' Dorian Stone',\n  '  Kian Hayden',\n  ' Hughie Hays',\n  '  Elvis Glover',\n  ' Ahmad Bender',\n  ' Barnaby Vargas',\n  '  Jeevan Mills',\n  ' Kyle Wade',\n  ' Jaye Bell',\n  ' Tasha Vinson',\n  ' Kaison Galindo',\n  ' David Mathews',\n  'Simon Rios',\n  ' Shelley Ventura',\n  'Derrick Liu',\n  ' Kaleem Kendall',\n  ' Kameron Hamilton',\n  ' Garry Davenport',\n  ' Ieuan Lester',\n  'Rikki Christensen',\n  'Austin Stacey',\n  ' Adrian Bowler',\n  ' Jaidan Bryant',\n  'Willem Swift',\n  ' Nial Langley',\n  'Aaron Chester',\n  'Yahya Herrera',\n  'Ronan Fountain',\n  ' Hunter Steadman',\n];\n\nexport default employeeList;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}